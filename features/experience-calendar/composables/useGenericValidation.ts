import { getByPath } from "dot-path-value";
import { ZodFormattedError, ZodTypeAny } from "zod";

/**

Provides a generic validation function that uses Zod for schema validation.
@template T - The ZodTypeAny type for the schema.
@param  schema - The Zod schema to validate against.
@returns  An object containing functions and properties to facilitate validation.
@property runValidation - Runs validation on the provided values against the schema.
@property isValid - Weather the form is valid or not
@property errors - A Vue ref holding the validation errors, if any.
@property formattedErrors - A computed Vue ref holding the validation errors formatted as an array of strings.
*/
export function useGenericValidation<T extends ZodTypeAny>(schema: T) {
  const validationErrors = ref<ZodFormattedError<any> | null>(null);

  /**
   * Returns the error generated by zod for the given path
   * @param path path to the error using dot notation (prefix with the pricing index)
   * @example getPricingError("0.name"); getPricingError("0.age_range.from");
   */
  const getError = (path: string): Record<string, any> => {
    return validationErrors.value ? getByPath(validationErrors.value, path as any) ?? {} : {};
  };

  const hasError = (path: string) => !!getError(path)._errors && getError(path)._errors.length > 0;

  const isValid = computed(() => !validationErrors.value);

  function runValidation(values: unknown) {
    const val = schema.safeParse(values);

    if (val.success) {
      validationErrors.value = null;
    } else {
      validationErrors.value = val.error.format();
    }
  }

  return {
    runValidation,
    isValid,
    errors: validationErrors,
    getError,
    hasError,
  };
}
